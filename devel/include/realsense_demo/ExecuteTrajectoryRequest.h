// Generated by gencpp from file realsense_demo/ExecuteTrajectoryRequest.msg
// DO NOT EDIT!


#ifndef REALSENSE_DEMO_MESSAGE_EXECUTETRAJECTORYREQUEST_H
#define REALSENSE_DEMO_MESSAGE_EXECUTETRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace realsense_demo
{
template <class ContainerAllocator>
struct ExecuteTrajectoryRequest_
{
  typedef ExecuteTrajectoryRequest_<ContainerAllocator> Type;

  ExecuteTrajectoryRequest_()
    : index(0)  {
    }
  ExecuteTrajectoryRequest_(const ContainerAllocator& _alloc)
    : index(0)  {
  (void)_alloc;
    }



   typedef uint8_t _index_type;
  _index_type index;





  typedef boost::shared_ptr< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteTrajectoryRequest_

typedef ::realsense_demo::ExecuteTrajectoryRequest_<std::allocator<void> > ExecuteTrajectoryRequest;

typedef boost::shared_ptr< ::realsense_demo::ExecuteTrajectoryRequest > ExecuteTrajectoryRequestPtr;
typedef boost::shared_ptr< ::realsense_demo::ExecuteTrajectoryRequest const> ExecuteTrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator1> & lhs, const ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator1> & lhs, const ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9865c521c6f40dd504cfcb9a4dfb1268";
  }

  static const char* value(const ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9865c521c6f40dd5ULL;
  static const uint64_t static_value2 = 0x04cfcb9a4dfb1268ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_demo/ExecuteTrajectoryRequest";
  }

  static const char* value(const ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 index\n"
;
  }

  static const char* value(const ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteTrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_demo::ExecuteTrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_DEMO_MESSAGE_EXECUTETRAJECTORYREQUEST_H
